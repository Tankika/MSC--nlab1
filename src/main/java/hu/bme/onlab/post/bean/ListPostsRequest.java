package hu.bme.onlab.post.bean;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.Set;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class ListPostsRequest implements Bean {

	@PropertyDefinition
	private int page;
	@PropertyDefinition
	private int pageSize;
	//------------------------- AUTOGENERATED START -------------------------
	///CLOVER:OFF
	/**
	 * The meta-bean for {@code ListPostsRequest}.
	 * @return the meta-bean, not null
	 */
	public static ListPostsRequest.Meta meta() {
		return ListPostsRequest.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(ListPostsRequest.Meta.INSTANCE);
	}

	@Override
	public ListPostsRequest.Meta metaBean() {
		return ListPostsRequest.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the page.
	 * @return the value of the property
	 */
	public int getPage() {
		return page;
	}

	/**
	 * Sets the page.
	 * @param page  the new value of the property
	 */
	public void setPage(int page) {
		this.page = page;
	}

	/**
	 * Gets the the {@code page} property.
	 * @return the property, not null
	 */
	public final Property<Integer> page() {
		return metaBean().page().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the pageSize.
	 * @return the value of the property
	 */
	public int getPageSize() {
		return pageSize;
	}

	/**
	 * Sets the pageSize.
	 * @param pageSize  the new value of the property
	 */
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	/**
	 * Gets the the {@code pageSize} property.
	 * @return the property, not null
	 */
	public final Property<Integer> pageSize() {
		return metaBean().pageSize().createProperty(this);
	}

	//-----------------------------------------------------------------------
	@Override
	public ListPostsRequest clone() {
		return JodaBeanUtils.cloneAlways(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			ListPostsRequest other = (ListPostsRequest) obj;
			return (getPage() == other.getPage()) &&
					(getPageSize() == other.getPageSize());
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(getPage());
		hash = hash * 31 + JodaBeanUtils.hashCode(getPageSize());
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(96);
		buf.append("ListPostsRequest{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("page").append('=').append(JodaBeanUtils.toString(getPage())).append(',').append(' ');
		buf.append("pageSize").append('=').append(JodaBeanUtils.toString(getPageSize())).append(',').append(' ');
	}

	//-----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code ListPostsRequest}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code page} property.
		 */
		private final MetaProperty<Integer> page = DirectMetaProperty.ofReadWrite(
				this, "page", ListPostsRequest.class, Integer.TYPE);
		/**
		 * The meta-property for the {@code pageSize} property.
		 */
		private final MetaProperty<Integer> pageSize = DirectMetaProperty.ofReadWrite(
				this, "pageSize", ListPostsRequest.class, Integer.TYPE);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
				this, null,
				"page",
				"pageSize");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
				case 3433103:  // page
					return page;
				case 859428656:  // pageSize
					return pageSize;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public BeanBuilder<? extends ListPostsRequest> builder() {
			return new DirectBeanBuilder<ListPostsRequest>(new ListPostsRequest());
		}

		@Override
		public Class<? extends ListPostsRequest> beanType() {
			return ListPostsRequest.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/**
		 * The meta-property for the {@code page} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Integer> page() {
			return page;
		}

		/**
		 * The meta-property for the {@code pageSize} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Integer> pageSize() {
			return pageSize;
		}

		//-----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 3433103:  // page
					return ((ListPostsRequest) bean).getPage();
				case 859428656:  // pageSize
					return ((ListPostsRequest) bean).getPageSize();
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 3433103:  // page
					((ListPostsRequest) bean).setPage((Integer) newValue);
					return;
				case 859428656:  // pageSize
					((ListPostsRequest) bean).setPageSize((Integer) newValue);
					return;
			}
			super.propertySet(bean, propertyName, newValue, quiet);
		}

	}

	///CLOVER:ON
	//-------------------------- AUTOGENERATED END --------------------------
}
