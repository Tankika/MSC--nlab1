package hu.bme.onlab.post.bean;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class ListPostsResponse implements Bean {
	
	@PropertyDefinition
	private List<Post> posts;
	
	//------------------------- AUTOGENERATED START -------------------------
	///CLOVER:OFF
	/**
	 * The meta-bean for {@code ListPostsResponse}.
	 * @return the meta-bean, not null
	 */
	public static ListPostsResponse.Meta meta() {
		return ListPostsResponse.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(ListPostsResponse.Meta.INSTANCE);
	}

	@Override
	public ListPostsResponse.Meta metaBean() {
		return ListPostsResponse.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the posts.
	 * @return the value of the property
	 */
	public List<Post> getPosts() {
		return posts;
	}

	/**
	 * Sets the posts.
	 * @param posts  the new value of the property
	 */
	public void setPosts(List<Post> posts) {
		this.posts = posts;
	}

	/**
	 * Gets the the {@code posts} property.
	 * @return the property, not null
	 */
	public final Property<List<Post>> posts() {
		return metaBean().posts().createProperty(this);
	}

	//-----------------------------------------------------------------------
	@Override
	public ListPostsResponse clone() {
		return JodaBeanUtils.cloneAlways(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			ListPostsResponse other = (ListPostsResponse) obj;
			return JodaBeanUtils.equal(getPosts(), other.getPosts());
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(getPosts());
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(64);
		buf.append("ListPostsResponse{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("posts").append('=').append(JodaBeanUtils.toString(getPosts())).append(',').append(' ');
	}

	//-----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code ListPostsResponse}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code posts} property.
		 */
		@SuppressWarnings({"unchecked", "rawtypes" })
		private final MetaProperty<List<Post>> posts = DirectMetaProperty.ofReadWrite(
				this, "posts", ListPostsResponse.class, (Class) List.class);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
				this, null,
				"posts");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
				case 106855379:  // posts
					return posts;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public BeanBuilder<? extends ListPostsResponse> builder() {
			return new DirectBeanBuilder<ListPostsResponse>(new ListPostsResponse());
		}

		@Override
		public Class<? extends ListPostsResponse> beanType() {
			return ListPostsResponse.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/**
		 * The meta-property for the {@code posts} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<List<Post>> posts() {
			return posts;
		}

		//-----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 106855379:  // posts
					return ((ListPostsResponse) bean).getPosts();
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@SuppressWarnings("unchecked")
		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 106855379:  // posts
					((ListPostsResponse) bean).setPosts((List<Post>) newValue);
					return;
			}
			super.propertySet(bean, propertyName, newValue, quiet);
		}

	}

	///CLOVER:ON
	//-------------------------- AUTOGENERATED END --------------------------
}
