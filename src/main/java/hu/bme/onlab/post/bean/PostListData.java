package hu.bme.onlab.post.bean;

import java.util.Calendar;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class PostListData implements Bean {

    @PropertyDefinition
    private String title;
    @PropertyDefinition
    private Integer priceMin;
    @PropertyDefinition
    private Integer priceMax;
    @PropertyDefinition
    private Calendar creationDateTime;
    
	//------------------------- AUTOGENERATED START -------------------------
	///CLOVER:OFF
	/**
	 * The meta-bean for {@code PostListData}.
	 * @return the meta-bean, not null
	 */
	public static PostListData.Meta meta() {
		return PostListData.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(PostListData.Meta.INSTANCE);
	}

	@Override
	public PostListData.Meta metaBean() {
		return PostListData.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the title.
	 * @return the value of the property
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 * @param title  the new value of the property
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the the {@code title} property.
	 * @return the property, not null
	 */
	public final Property<String> title() {
		return metaBean().title().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the priceMin.
	 * @return the value of the property
	 */
	public Integer getPriceMin() {
		return priceMin;
	}

	/**
	 * Sets the priceMin.
	 * @param priceMin  the new value of the property
	 */
	public void setPriceMin(Integer priceMin) {
		this.priceMin = priceMin;
	}

	/**
	 * Gets the the {@code priceMin} property.
	 * @return the property, not null
	 */
	public final Property<Integer> priceMin() {
		return metaBean().priceMin().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the priceMax.
	 * @return the value of the property
	 */
	public Integer getPriceMax() {
		return priceMax;
	}

	/**
	 * Sets the priceMax.
	 * @param priceMax  the new value of the property
	 */
	public void setPriceMax(Integer priceMax) {
		this.priceMax = priceMax;
	}

	/**
	 * Gets the the {@code priceMax} property.
	 * @return the property, not null
	 */
	public final Property<Integer> priceMax() {
		return metaBean().priceMax().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the creationDateTime.
	 * @return the value of the property
	 */
	public Calendar getCreationDateTime() {
		return creationDateTime;
	}

	/**
	 * Sets the creationDateTime.
	 * @param creationDateTime  the new value of the property
	 */
	public void setCreationDateTime(Calendar creationDateTime) {
		this.creationDateTime = creationDateTime;
	}

	/**
	 * Gets the the {@code creationDateTime} property.
	 * @return the property, not null
	 */
	public final Property<Calendar> creationDateTime() {
		return metaBean().creationDateTime().createProperty(this);
	}

	//-----------------------------------------------------------------------
	@Override
	public PostListData clone() {
		return JodaBeanUtils.cloneAlways(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			PostListData other = (PostListData) obj;
			return JodaBeanUtils.equal(getTitle(), other.getTitle()) &&
					JodaBeanUtils.equal(getPriceMin(), other.getPriceMin()) &&
					JodaBeanUtils.equal(getPriceMax(), other.getPriceMax()) &&
					JodaBeanUtils.equal(getCreationDateTime(), other.getCreationDateTime());
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(getTitle());
		hash = hash * 31 + JodaBeanUtils.hashCode(getPriceMin());
		hash = hash * 31 + JodaBeanUtils.hashCode(getPriceMax());
		hash = hash * 31 + JodaBeanUtils.hashCode(getCreationDateTime());
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(160);
		buf.append("PostListData{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("title").append('=').append(JodaBeanUtils.toString(getTitle())).append(',').append(' ');
		buf.append("priceMin").append('=').append(JodaBeanUtils.toString(getPriceMin())).append(',').append(' ');
		buf.append("priceMax").append('=').append(JodaBeanUtils.toString(getPriceMax())).append(',').append(' ');
		buf.append("creationDateTime").append('=').append(JodaBeanUtils.toString(getCreationDateTime())).append(',').append(' ');
	}

	//-----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code PostListData}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code title} property.
		 */
		private final MetaProperty<String> title = DirectMetaProperty.ofReadWrite(
				this, "title", PostListData.class, String.class);
		/**
		 * The meta-property for the {@code priceMin} property.
		 */
		private final MetaProperty<Integer> priceMin = DirectMetaProperty.ofReadWrite(
				this, "priceMin", PostListData.class, Integer.class);
		/**
		 * The meta-property for the {@code priceMax} property.
		 */
		private final MetaProperty<Integer> priceMax = DirectMetaProperty.ofReadWrite(
				this, "priceMax", PostListData.class, Integer.class);
		/**
		 * The meta-property for the {@code creationDateTime} property.
		 */
		private final MetaProperty<Calendar> creationDateTime = DirectMetaProperty.ofReadWrite(
				this, "creationDateTime", PostListData.class, Calendar.class);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
				this, null,
				"title",
				"priceMin",
				"priceMax",
				"creationDateTime");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
				case 110371416:  // title
					return title;
				case -1176957879:  // priceMin
					return priceMin;
				case -1176958117:  // priceMax
					return priceMax;
				case 1501934490:  // creationDateTime
					return creationDateTime;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public BeanBuilder<? extends PostListData> builder() {
			return new DirectBeanBuilder<PostListData>(new PostListData());
		}

		@Override
		public Class<? extends PostListData> beanType() {
			return PostListData.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/**
		 * The meta-property for the {@code title} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<String> title() {
			return title;
		}

		/**
		 * The meta-property for the {@code priceMin} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Integer> priceMin() {
			return priceMin;
		}

		/**
		 * The meta-property for the {@code priceMax} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Integer> priceMax() {
			return priceMax;
		}

		/**
		 * The meta-property for the {@code creationDateTime} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Calendar> creationDateTime() {
			return creationDateTime;
		}

		//-----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 110371416:  // title
					return ((PostListData) bean).getTitle();
				case -1176957879:  // priceMin
					return ((PostListData) bean).getPriceMin();
				case -1176958117:  // priceMax
					return ((PostListData) bean).getPriceMax();
				case 1501934490:  // creationDateTime
					return ((PostListData) bean).getCreationDateTime();
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 110371416:  // title
					((PostListData) bean).setTitle((String) newValue);
					return;
				case -1176957879:  // priceMin
					((PostListData) bean).setPriceMin((Integer) newValue);
					return;
				case -1176958117:  // priceMax
					((PostListData) bean).setPriceMax((Integer) newValue);
					return;
				case 1501934490:  // creationDateTime
					((PostListData) bean).setCreationDateTime((Calendar) newValue);
					return;
			}
			super.propertySet(bean, propertyName, newValue, quiet);
		}

	}

	///CLOVER:ON
	//-------------------------- AUTOGENERATED END --------------------------
}
