package hu.bme.onlab.post.bean;

import java.util.Calendar;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class Post implements Bean {

    @PropertyDefinition
    private String entry;
    
    @PropertyDefinition
    private Calendar creationDateTime;
    
    @PropertyDefinition
    private String email;
    
	//------------------------- AUTOGENERATED START -------------------------
	///CLOVER:OFF
	/**
	 * The meta-bean for {@code Post}.
	 * @return the meta-bean, not null
	 */
	public static Post.Meta meta() {
		return Post.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(Post.Meta.INSTANCE);
	}

	@Override
	public Post.Meta metaBean() {
		return Post.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the entry.
	 * @return the value of the property
	 */
	public String getEntry() {
		return entry;
	}

	/**
	 * Sets the entry.
	 * @param entry  the new value of the property
	 */
	public void setEntry(String entry) {
		this.entry = entry;
	}

	/**
	 * Gets the the {@code entry} property.
	 * @return the property, not null
	 */
	public final Property<String> entry() {
		return metaBean().entry().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the creationDateTime.
	 * @return the value of the property
	 */
	public Calendar getCreationDateTime() {
		return creationDateTime;
	}

	/**
	 * Sets the creationDateTime.
	 * @param creationDateTime  the new value of the property
	 */
	public void setCreationDateTime(Calendar creationDateTime) {
		this.creationDateTime = creationDateTime;
	}

	/**
	 * Gets the the {@code creationDateTime} property.
	 * @return the property, not null
	 */
	public final Property<Calendar> creationDateTime() {
		return metaBean().creationDateTime().createProperty(this);
	}

	//-----------------------------------------------------------------------
	/**
	 * Gets the email.
	 * @return the value of the property
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * Sets the email.
	 * @param email  the new value of the property
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Gets the the {@code email} property.
	 * @return the property, not null
	 */
	public final Property<String> email() {
		return metaBean().email().createProperty(this);
	}

	//-----------------------------------------------------------------------
	@Override
	public Post clone() {
		return JodaBeanUtils.cloneAlways(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			Post other = (Post) obj;
			return JodaBeanUtils.equal(getEntry(), other.getEntry()) &&
					JodaBeanUtils.equal(getCreationDateTime(), other.getCreationDateTime()) &&
					JodaBeanUtils.equal(getEmail(), other.getEmail());
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(getEntry());
		hash = hash * 31 + JodaBeanUtils.hashCode(getCreationDateTime());
		hash = hash * 31 + JodaBeanUtils.hashCode(getEmail());
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(128);
		buf.append("Post{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("entry").append('=').append(JodaBeanUtils.toString(getEntry())).append(',').append(' ');
		buf.append("creationDateTime").append('=').append(JodaBeanUtils.toString(getCreationDateTime())).append(',').append(' ');
		buf.append("email").append('=').append(JodaBeanUtils.toString(getEmail())).append(',').append(' ');
	}

	//-----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code Post}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code entry} property.
		 */
		private final MetaProperty<String> entry = DirectMetaProperty.ofReadWrite(
				this, "entry", Post.class, String.class);
		/**
		 * The meta-property for the {@code creationDateTime} property.
		 */
		private final MetaProperty<Calendar> creationDateTime = DirectMetaProperty.ofReadWrite(
				this, "creationDateTime", Post.class, Calendar.class);
		/**
		 * The meta-property for the {@code email} property.
		 */
		private final MetaProperty<String> email = DirectMetaProperty.ofReadWrite(
				this, "email", Post.class, String.class);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
				this, null,
				"entry",
				"creationDateTime",
				"email");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
				case 96667762:  // entry
					return entry;
				case 1501934490:  // creationDateTime
					return creationDateTime;
				case 96619420:  // email
					return email;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public BeanBuilder<? extends Post> builder() {
			return new DirectBeanBuilder<Post>(new Post());
		}

		@Override
		public Class<? extends Post> beanType() {
			return Post.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/**
		 * The meta-property for the {@code entry} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<String> entry() {
			return entry;
		}

		/**
		 * The meta-property for the {@code creationDateTime} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Calendar> creationDateTime() {
			return creationDateTime;
		}

		/**
		 * The meta-property for the {@code email} property.
		 * @return the meta-property, not null
		 */
		public final MetaProperty<String> email() {
			return email;
		}

		//-----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 96667762:  // entry
					return ((Post) bean).getEntry();
				case 1501934490:  // creationDateTime
					return ((Post) bean).getCreationDateTime();
				case 96619420:  // email
					return ((Post) bean).getEmail();
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			switch (propertyName.hashCode()) {
				case 96667762:  // entry
					((Post) bean).setEntry((String) newValue);
					return;
				case 1501934490:  // creationDateTime
					((Post) bean).setCreationDateTime((Calendar) newValue);
					return;
				case 96619420:  // email
					((Post) bean).setEmail((String) newValue);
					return;
			}
			super.propertySet(bean, propertyName, newValue, quiet);
		}

	}

	///CLOVER:ON
	//-------------------------- AUTOGENERATED END --------------------------
}
